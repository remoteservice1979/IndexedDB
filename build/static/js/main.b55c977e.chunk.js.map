{"version":3,"sources":["reducers/errorReducer.js","reducers/loader.js","reducers/modal.js","reducers/formsReducer.js","reducers/index.js","actions/types.js","reducers/formLoader.js","store.js","utils/helpers.js","db.js","actions/modal.js","components/fields/Text.js","components/layout/Card.js","components/fields/Textarea.js","components/layout/ModalConfirmation.js","pages/CreateForm.js","actions/form.js","pages/ListForm.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","status","state","loading","create","list","deleting","combineReducers","errors","arguments","length","undefined","action","type","payload","loadingRequest","Object","objectSpread","modal","formLoader","forms","defineProperty","id","required","section","middleware","thunk","store","next","promise","dispatch","ready","newAction","assign","makeAction","then","result","error","err","response","console","log","composeSetup","compose","createStore","rootReducer","applyMiddleware","apply","uniqueId","Math","random","toString","substr","db","Dexie","version","stores","modalClose","modalButtonFinish","Text","_ref","name","placeholder","value","size","label","info","style","col","onChange","onBlur","disabled","react_default","a","createElement","Fragment","className","classnames","is-invalid","form-control-lg","form-control-sm","dangerouslySetInnerHTML","__html","defaultProps","xs","Card","props","_this","classCallCheck","this","initData","possibleConstructorReturn","getPrototypeOf","call","fieldType","question","title","options","onTitleUpdate","bind","assertThisInitialized","onFieldsUpdate","onPlaceholderUpdate","onUpdateOptions","addOption","e","target","setState","preventDefault","concat","toConsumableArray","push","resData","_","fill","ind","splice","_this2","padding","fontSize","isEmpty","map","val","index","_React$createElement","key","lineHeight","href","color","onClick","removeOption","md","fields_Text","marginBottom","forceUpdate","display","marginTop","paddingBottom","Component","Textarea","rows","ModalConfirmation","show","oldClassName","document","body","modalButtonLoading","classList","remove","onClose","stateId","children","role","aria-labelledby","aria-hidden","aria-label","React","Children","only","cancelButton","loadingButton","okButton","connect","CreateForm","desc","edit","delete","success","init","editName","sectionId","sectionName","addCard","addSection","saveForm","removeForm","match","params","fetchForm","res","description","form","entries","keyBy","sections","wiz","idx","json","fields","setTimeout","_this3","catch","newCard","unset","_this4","deleteForm","history","alert","_this5","removingId","cards","textAlign","onKeypress","onKeyDown","editSection","height","newField","clear","filter","bg-white","toUpperCase","replace","toggleRequired","marginRight","btn required","btn-default","btn-dark","float","removeCard","editCard","btn delete-card","btn-outline-secondary","btn-success","layout_Card","class","fields_Textarea","Link","to","flexDirection","marginLeft","findKey","cr","modalOpen","layout_ModalConfirmation","Promise","asyncToGenerator","regenerator_default","mark","_callee","resolve","reject","field","wrap","_context","prev","table","where","parseInt","first","sent","stop","_x","_x2","update","code","add","deleteCount","ListForm","base","fetchForms","base_url","clearForm","row","gotoEdit","colSpan","args","toArray","App","es","HashRouter","basename","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b55c977e.chunk.js","sourcesContent":["import { GET_ERRORS } from '../actions/types';\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload === null ? {} : action.payload;\n        default:\n            return state;\n    }\n}","import { LOADER_START, LOADER_COMPLETE, LOADER_ERROR } from '../actions/types';\n\nconst initialState = {\n    data: null,\n    status: 'complete'\n}\n\nexport default function (state = initialState, action) {\n    let data = action.payload\n    switch (action.type) {\n        case LOADER_START:\n            return {\n                ...state,\n                status: data.status,\n                data: data.data\n            }\n        case LOADER_COMPLETE:\n            return {\n                ...state,\n                status: data.status,\n                data: data.data\n            }\n        case LOADER_ERROR:\n            return {\n                ...state,\n                status: data.status,\n                data: data.data\n            }\n        default:\n            return state;\n    }\n}","import { MODAL_BUTTON_LOADING_START, MODAL_BUTTON_LOADING_END } from '../actions/types';\n\nconst initialState = {\n    state: false,\n    loading: false\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case MODAL_BUTTON_LOADING_START:\n            return {\n                state: true,\n                loading: true\n            }\n        case MODAL_BUTTON_LOADING_END:\n            return {\n                state: true,\n                loading: false\n            }\n        default:\n            return state;\n    }\n}","import {\n    GET_ERRORS,\n    CARD_NEW,\n    CARD_REMOVED,\n    CARD_REMOVING,\n    CARD_REQUIRED,\n    CHANGE_QUESTION,\n    CHANGE_PLACEHOLDER,\n    CHANGE_TYPE,\n    ADD_OPTION,\n    CHANGE_OPTION,\n    REMOVE_OPTION,\n    FETCH_FORMS,\n    FETCH_FORM,\n    SAVE_FORM,\n    CLEAR_FORM,\n    CHANGE_SECTION\n} from '../actions/types';\nimport _ from 'lodash'\n\nconst initialState = {\n    create: {},\n    list: [],\n    deleting: false\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CARD_NEW:\n        case CHANGE_QUESTION:\n        case CHANGE_PLACEHOLDER:\n        case CHANGE_TYPE:\n        case ADD_OPTION:\n        case CHANGE_OPTION:\n        case REMOVE_OPTION:\n            return {\n                ...state,\n                create: {\n                    ...state.create,\n                    // Update our Post object with a new \"comments\" array\n                    [action.id]: action.payload\n                }\n            }\n        case CARD_REMOVED:\n            return {\n                ...state,\n                deleting: false\n            }\n\n        case CARD_REQUIRED:\n            return {\n                ...state,\n                create: {\n                    ...state.create,\n                    // Update our Post object with a new \"comments\" array\n                    [action.payload]: {\n                        ...state.create[action.payload],\n                        required: action.required\n                    }\n                }\n            }\n        case FETCH_FORMS:\n            return {\n                ...state,\n                list: action.payload\n            }\n        case FETCH_FORM:\n            return {\n                ...state,\n                create: action.payload\n            }\n        case CLEAR_FORM:\n            return {\n                ...state,\n                create: {}\n            }\n        case CARD_REMOVING:\n            const id = action.id\n            const list = action.payload\n            return {\n                ...state,\n                create: list,\n                deleting: id\n            }\n        case CHANGE_SECTION:\n            return {\n                ...state,\n                create: {\n                    ...state.create,\n                    [action.id]: {\n                        ...state.create[action.id],\n                        section: action.payload\n                    }\n                }\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\nimport errorReducer from './errorReducer'\nimport loaderReducer from './loader'\nimport modalReducer from './modal'\nimport formLoaderReducer from './formLoader'\nimport forms from './formsReducer'\n\nexport default combineReducers({\n    errors: errorReducer,\n    loadingRequest: loaderReducer,\n    modal: modalReducer,\n    formLoader: formLoaderReducer,\n    forms: forms\n});\n","// Loader\nexport const LOADER_START = 'LOADING_SPINNER_START'\nexport const LOADER_COMPLETE = 'LOADING_SPINNER_COMPLETE'\nexport const LOADER_ERROR = 'LOADING_SPINNER_ERROR'\nexport const FORM_LOADING_START = 'FORM_LOADING_START'\nexport const FORM_LOADING_FINISH = 'FORM_LOADING_FINISH'\n\n// Card\nexport const CARD_NEW = \"CARD_NEW\"\nexport const CARD_REMOVING = \"CARD_REMOVING\"\nexport const CARD_REMOVED = \"CARD_REMOVE\"\nexport const CARD_REQUIRED = \"CARD_REQUIRED\"\nexport const ADD_QUESTION = \"ADD_QUESTION\"\nexport const CHANGE_QUESTION = \"CHANGE_QUESTION\"\nexport const CHANGE_TYPE = \"CHANGE_TYPE\"\nexport const CHANGE_PLACEHOLDER = \"CHANGE_PLACEHOLDER\"\nexport const ADD_OPTION = \"ADD_OPTION\"\nexport const CHANGE_OPTION = \"CHANGE_OPTION\"\nexport const REMOVE_OPTION = \"REMOVE_OPTION\"\nexport const CHANGE_SECTION = \"CHANGE_SECTION\"\n\n// FOrm list\nexport const FETCH_FORMS = \"FETCH_FORMS\"\nexport const FETCH_FORM = \"FETCH_FORM\"\nexport const SAVE_FORM = \"SAVE_FORM\"\nexport const UPDATE_FORM = \"UPDATE_FORM\"\nexport const CLEAR_FORM = \"CLEAR_FORM\"\nexport const DELETE_FORM = \"DELETE_FORM\"\n\n// Modal\nexport const MODAL_BUTTON_LOADING_START = \"Modal/BUTTON_LOADING\"\nexport const MODAL_BUTTON_LOADING_END = \"Modal/BUTTON_FINISH\"\nexport const MODAL_SHOW = \"Modal/SHOW\"\nexport const MODAL_HIDE = \"Modal/HIDE\"\n\n\n\n// Exceptions\nexport const GET_ERRORS = 'GET_ERRORS';","import { FORM_LOADING_START, FORM_LOADING_FINISH } from '../actions/types';\n\nconst initialState = false\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case FORM_LOADING_START:\n            return true\n        case FORM_LOADING_FINISH:\n            return false;\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { LOADER_START, LOADER_COMPLETE, LOADER_ERROR } from './actions/types'\n\nconst initialState = {};\n\nconst loadingConnection = store => next => action => {\n\n    if (!action.promise) {\n        return next(action)\n    }\n\n    function makeAction(ready, data) {\n        const newAction = Object.assign({}, action, { ready }, data)\n        delete newAction.promise\n        return newAction\n    }\n\n    store.dispatch({\n        type: LOADER_START, payload: {\n            status: 'start'\n        }\n    })\n\n    next(makeAction(false))\n\n    return action.promise.then(\n        result => {\n            store.dispatch({\n                type: LOADER_COMPLETE, payload: {\n                    status: 'complete'\n                }\n            })\n        },\n        error => {\n            let err = error\n            store.dispatch({\n                type: LOADER_ERROR, payload: {\n                    status: 'error',\n                    data: err.response ? err.response : err,\n                }\n            })\n            console.log('Caught Exception!', error)\n        }\n    )\n\n}\n\n\nconst middleware = [\n    thunk,\n    loadingConnection,\n];\n\n\n// dev tools middleware\nconst composeSetup = process.env.NODE_ENV !== 'production' && typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeSetup(\n        applyMiddleware(...middleware)\n    )\n\n);\n\nexport default store;","import _ from 'lodash';\nimport rest from '../utils/rest'\n\nexport const urlExists = (url) => {\n    var http = new XMLHttpRequest();\n    http.open('HEAD', url, false);\n    http.send();\n    return http.status != 404;\n}\n\nexport const validateRequired = (data, filterData) => {\n    let output = {}\n    filterData.map(key => {\n        if (_.has(data, key) && (data[key] === '' || data[key] === null || data[key] === undefined)) {\n            output[key] = backwardsLang(key)\n        }\n    })\n\n    return output;\n}\n\nexport const validateEmail = (email) => {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nexport const inputNumberOnly = (evt) => {\n    let theEvent = evt;\n    let key\n    // Handle paste\n    if (theEvent.type === 'paste') {\n        key = window.event.clipboardData.getData('text/plain');\n    } else {\n        // Handle key press\n        key = theEvent.keyCode || theEvent.which;\n        key = String.fromCharCode(key);\n    }\n    var regex = /[0-9]|\\./;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (theEvent.preventDefault) theEvent.preventDefault();\n    }\n}\n\nexport const encapsulateErrors = (data) => {\n    let errors = []\n    if (_.has(data, 'validated')) {\n        if (_.has(data, 'messages') && typeof data.messages === 'object') {\n            return _.mapValues(data.messages, (item) => {\n                return _.join(item, \"\\n\")\n            })\n        } else if (_.has(data, 'messages') && typeof data.messages === 'string') {\n            return data.messages\n        }\n\n        return errors;\n    }\n\n    return data\n}\n\nexport const findStatusText = data => status => {\n    return _.findKey(data, status) ? true : false;\n}\n\nexport const encodeUri = uri => {\n    const str = uri.replace(\" \", '%20')\n    return encodeURIComponent(str)\n}\n\nexport const cacheStore = () => {\n    return localStorage\n}\n\nexport const backwardsLang = (key) => {\n    return key.capitalize().replace(\"_\", \" \")\n}\n\n/**\n   * Creates a string that can be used for dynamic id attributes\n   * Example: \"id-so7567s1pcpojemi\"\n   * @returns {string}\n   */\nexport const uniqueId = () => {\n    return 'id-' + Math.random().toString(36).substr(2, 16);\n}\n\n/**\n   * Creates a string that can be used for dynamic id attributes\n   * Example: \"id-so7567s1pcpojemi\"\n   * @returns {string}\n   */\nexport const sectionID = () => {\n    return 'secId-' + Math.random().toString(30).substr(5, 20);\n}","import Dexie from 'dexie'\n\nconst db = new Dexie('agilworldCustomForm');\ndb.version(1).stores({ forms: '++id, &code, title, *data' });\n\nexport default db;","import {\n    MODAL_SHOW,\n    MODAL_HIDE,\n    MODAL_BUTTON_LOADING_START,\n    MODAL_BUTTON_LOADING_END,\n    FORM_LOADING_START,\n    FORM_LOADING_FINISH\n} from './types';\n\nexport const modalOpen = () => dispatch => {\n    dispatch({\n        type: MODAL_SHOW\n    })\n}\n\nexport const modalClose = () => dispatch => {\n    dispatch({\n        type: MODAL_HIDE\n    })\n}\n\nexport const modalButtonLoading = () => dispatch => {\n    dispatch({\n        type: MODAL_BUTTON_LOADING_START\n    })\n}\n\nexport const modalButtonFinish = () => dispatch => {\n    dispatch({\n        type: MODAL_BUTTON_LOADING_END\n    })\n}\n\nexport const formLoadingStart = () => dispatch => {\n    dispatch({\n        type: FORM_LOADING_START\n    })\n}\n\nexport const formLoadingFinish = () => dispatch => {\n    dispatch({\n        type: FORM_LOADING_FINISH\n    })\n}","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Text = ({\n    name,\n    placeholder,\n    value,\n    label,\n    size,\n    error,\n    info,\n    type,\n    col,\n    style,\n    id,\n    onChange,\n    onBlur,\n    disabled\n}) => {\n    return (\n        <React.Fragment>\n            <input\n                type={type}\n                id={id}\n                className={classnames('form-control', {\n                    'is-invalid': error,\n                    'form-control-lg': size === 'lg',\n                    'form-control-sm': size === 'sm'\n                })}\n                placeholder={placeholder}\n                name={name}\n                value={value}\n                onChange={onChange}\n                onBlur={onBlur}\n                style={style}\n                disabled={disabled}\n            />\n            {info && <small className=\"form-text text-muted\" dangerouslySetInnerHTML={{ __html: info }}></small>}\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </React.Fragment>\n    );\n};\n\nText.propTypes = {\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n    info: PropTypes.string,\n    error: PropTypes.string,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool\n};\n\nText.defaultProps = {\n    placeholder: 'Short Text here',\n    type: 'text',\n    size: 'md',\n    col: {\n        xs: 12\n    }\n};\n\nexport default Text;","import React, { Component, PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport FieldText from '../fields/Text'\nimport _ from 'lodash'\nimport {\n    CHANGE_QUESTION,\n    CHANGE_PLACEHOLDER,\n    CHANGE_TYPE,\n    ADD_OPTION,\n    CHANGE_OPTION,\n    REMOVE_OPTION\n} from '../../actions/types'\nimport store from '../../store'\nimport { MdCheckBoxOutlineBlank, MdRadioButtonUnchecked, MdExpandMore, MdDelete } from 'react-icons/md'\n\nclass Card extends Component {\n    constructor(props) {\n        super(props)\n        const initData = this.props.data\n        this.state = {\n            fieldType: initData.type,\n            value: initData.placeholder,\n            question: initData.title,\n            options: initData.options\n        }\n\n        this.onTitleUpdate = this.onTitleUpdate.bind(this)\n        this.onFieldsUpdate = this.onFieldsUpdate.bind(this)\n        this.onPlaceholderUpdate = this.onPlaceholderUpdate.bind(this)\n\n        // Options\n        this.onUpdateOptions = this.onUpdateOptions.bind(this)\n        this.addOption = this.addOption.bind(this)\n    }\n    onTitleUpdate(e) {\n        let data = this.props.data\n\n        data.title = e.target.value\n\n        store.dispatch({\n            type: CHANGE_QUESTION,\n            payload: data,\n            id: this.props.id\n        })\n    }\n\n    onPlaceholderUpdate(e) {\n        let data = this.props.data\n\n        data.placeholder = e.target.value\n\n        store.dispatch({\n            type: CHANGE_PLACEHOLDER,\n            payload: data,\n            id: this.props.id\n        })\n\n    }\n\n    onFieldsUpdate(e) {\n        if (e.target.value == '') {\n            return\n        }\n\n        let data = this.props.data\n\n        data.type = e.target.value\n\n        store.dispatch({\n            type: CHANGE_TYPE,\n            payload: data,\n            id: this.props.id\n        })\n\n        this.setState({ fieldType: e.target.value })\n    }\n\n    addOption(e) {\n        e.preventDefault()\n\n        this.setState({ options: [...this.state.options, \"\"] })\n\n        let data = this.props.data\n\n        data.options.push(\"\")\n\n        store.dispatch({\n            type: ADD_OPTION,\n            payload: data,\n            id: this.props.id\n        })\n    }\n\n    onUpdateOptions(id, e) {\n        if (e.target.value == '') {\n            return\n        }\n\n        let data = this.props.data\n        const resData = _.fill(this.state.options, e.target.value, id, id)\n\n        data.options = resData\n\n        store.dispatch({\n            type: CHANGE_OPTION,\n            payload: data,\n            id: this.props.id\n        })\n    }\n\n    removeOption(ind, e) {\n        e.preventDefault()\n        let data = this.props.data\n\n        data.options.splice(ind, 1)\n\n        store.dispatch({\n            type: REMOVE_OPTION,\n            payload: data,\n            id: this.props.id\n        })\n    }\n\n    render() {\n        const type = this.state.fieldType\n        const id = this.props.id\n        const value = this.state.value\n\n\n        return (\n            <div id={id} className=\"panel\" style={{ padding: 0 }}>\n                <div className=\"panel-body\" style={{ padding: 0 }}>\n\n                    <div className=\"row\">\n                        <div className=\"col-8\">\n                            <input type=\"text\"\n                                onChange={(e) => { this.setState({ question: e.target.value }) }}\n                                onBlur={this.onTitleUpdate}\n                                placeholder=\"Question\"\n                                value={this.state.question}\n                                style={{ fontSize: \"17px\" }}\n                                className=\"form-control\" name=\"title\" id={id + \"_question\"} />\n                        </div>\n                        <div className=\"col-4\">\n                            <select name=\"fields\" className=\"form-control\" id=\"fields\"\n                                onChange={this.onFieldsUpdate}\n                                style={{ fontSize: \"17px\" }}\n                                value={this.state.fieldType}\n                            >\n                                <option value=\"text\">Text</option>\n                                <option value=\"textarea\">Paragaph</option>\n                                <option value=\"radio\">Multiple Choice</option>\n                                <option value=\"checkbox\">Checkboxes</option>\n                                <option value=\"dropdown\">Dropdown</option>\n                                <option value=\"image_upload\">Image Upload</option>\n                                <option value=\"date\">Date</option>\n                                <option value=\"time\">Time</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            {(\n                                this.props.data.type == 'text' ||\n                                this.props.data.type == 'textarea' ||\n                                this.props.data.type == 'image_upload'\n                            ) &&\n                                <input type=\"text\" placeholder={this.props.data.type == 'image_upload' ? \"Enter description\" : \"Enter placeholder\"} name={id + \"_placeholder\"} className=\"form-control\"\n                                    value={this.state.value}\n                                    onChange={(e) => { this.setState({ value: e.target.value }) }}\n                                    onBlur={this.onPlaceholderUpdate}\n                                    id={id + \"_placeholder\"} />}\n\n                            {(this.props.data.type == 'radio' || this.props.data.type == 'checkbox' || this.props.data.type == 'dropdown') && (\n                                <div className=\"row\">\n                                    <div className=\"text-left col-4\">\n                                        {!_.isEmpty(this.state.options) && this.state.options.map((val, index) => (\n                                            <div key={index} className=\"row\">\n                                                <div className=\"col-1\" style={{ lineHeight: \"50px\" }}>\n\n                                                    <a href=\"#\" style={{ color: \"#999\" }} onClick={this.removeOption.bind(this, index)}>\n                                                        <MdDelete size=\"1.2em\" />\n                                                    </a>\n                                                </div>\n                                                <div className=\"col-10\">\n                                                    <FieldText type=\"text\" placeholder=\"Enter Option\"\n                                                        name={id + \"_placeholder\"}\n                                                        style={{ marginBottom: \"5px\" }}\n                                                        value={val}\n                                                        onBlur={this.onUpdateOptions.bind(this, index)}\n                                                        onChange={(e) => {\n                                                            this.state.options[index] = e.target.value\n                                                            this.forceUpdate()\n                                                        }}\n                                                        style={{ marginBottom: \"10px\" }}\n                                                        id={id + \"_placeholder\"} />\n                                                </div>\n                                            </div>\n                                        ))}\n                                        <a href=\"#\"\n                                            style={{ display: \"block\", marginTop: \"10px\", paddingBottom: \"20px\" }}\n                                            onClick={this.addOption}>Add option</a>\n\n                                        <div className=\"clear\"></div>\n                                    </div>\n                                </div>\n                            )}\n\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nCard.propTypes = {\n    id: PropTypes.string.isRequired,\n    data: PropTypes.object.isRequired\n}\n\nexport default Card\n\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Textarea = ({\n    name,\n    placeholder,\n    value,\n    label,\n    size,\n    error,\n    info,\n    type,\n    col,\n    id,\n    style,\n    onChange,\n    onBlur,\n    disabled\n}) => {\n    return (\n        <div>\n            <textarea\n                id={id}\n                className={classnames('mceNoEditor form-control', {\n                    'is-invalid': error,\n                    'form-control-lg': size === 'lg',\n                    'form-control-sm': size === 'sm'\n                })}\n                placeholder={placeholder}\n                name={name}\n                value={value}\n                onChange={onChange}\n                onBlur={onBlur}\n                style={style}\n                disabled={disabled}\n                rows=\"3\"\n            >\n            </textarea>\n            {info && <small className=\"form-text text-muted\" dangerouslySetInnerHTML={{ __html: info }}></small>}\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\n\nTextarea.propTypes = {\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n    info: PropTypes.string,\n    error: PropTypes.string,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool\n};\n\nTextarea.defaultProps = {\n    placeholder: 'Short Text here',\n    type: 'text',\n    size: 'md',\n    col: {\n        xs: 12\n    }\n};\n\nexport default Textarea;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'\nimport { modalClose, modalButtonLoading, modalButtonFinish } from '../../actions/modal'\n\nclass ModalConfirmation extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            show: this.props.show,\n            oldClassName: document.body.className,\n        };\n    }\n    static propTypes = {\n        id: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        okButton: PropTypes.string,\n        loadingButton: PropTypes.string,\n        cancelButton: PropTypes.string,\n        className: PropTypes.string,\n        onClick: PropTypes.func,\n        onClose: PropTypes.func,\n        children: PropTypes.element.isRequired,\n        stateId: PropTypes.string.isRequired\n    };\n\n    static defaultProps = {\n        id: \"modalConfirmation\",\n        loadingButton: \"Loading...\",\n        okButton: 'Save Changes',\n        cancelButton: 'Close',\n        className: '',\n        stateId: ''\n    }\n\n    onClick(e) {\n        if (this.props.onClick) {\n            this.props.modalButtonLoading();\n            document.body.classList.remove(\"modal-open\");\n            this.props.onClick(e)\n        }\n    }\n\n    onClose(e) {\n        if (this.props.modal.loading) {\n            e.preventDefault()\n            return\n        }\n\n        document.body.classList.remove(\"modal-open\");\n\n        this.props.modalClose()\n        this.props.onClose()\n    }\n\n    render() {\n\n        if (!this.props.stateId) {\n            return null;\n        }\n\n        if (this.props.children) {\n            document.body.classList.remove(\"modal-open\");\n            const oldClassName = document.body.className + \" \" + \"modal-open\";\n            document.body.className = oldClassName\n\n            return (\n                <React.Fragment>\n                    <div className=\"modal-backdrop fade show\"></div>\n                    <div className={classnames('modal fade show ' + this.props.className)} id={this.props.id} role=\"dialog\" aria-labelledby={this.props.id + 'Title'} style={{ 'display': \"block\" }} aria-hidden=\"true\">\n                        <div className=\"modal-dialog modal-sm\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">{this.props.title}</h5>\n                                    <button type=\"button\" className=\"close\" disabled={this.props.modal.loading ? true : false} onClick={this.onClose.bind(this)} aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div className=\"modal-body\">\n                                    {React.Children.only(this.props.children)}\n                                </div>\n                                <div className=\"modal-footer\">\n                                    <button type=\"button\" disabled={this.props.modal.loading ? true : false} className=\"btn btn-secondary\" onClick={this.onClose.bind(this)}>{this.props.cancelButton}</button>\n                                    <button type=\"button\" disabled={this.props.modal.loading ? true : false} className=\"btn btn-primary\" onClick={this.onClick.bind(this)}>{this.props.modal.loading ? this.props.loadingButton : this.props.okButton}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </React.Fragment>\n            )\n        }\n\n        return null;\n    }\n}\n\nconst mapStatetoProps = state => ({\n    modal: state.modal,\n});\n\nexport default connect(mapStatetoProps, {\n    modalClose,\n    modalButtonFinish,\n    modalButtonLoading\n})(ModalConfirmation);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\nimport rest, { restForm } from '../utils/rest'\nimport { fetchForm, saveForm, deleteForm } from '../actions/form'\nimport { modalOpen, modalClose, modalButtonFinish } from '../actions/modal'\nimport store from '../store'\nimport _ from 'lodash'\nimport Card from '../components/layout/Card'\nimport { uniqueId, sectionID } from '../utils/helpers'\nimport { Text, Textarea } from '../components/fields'\nimport Modal from '../components/layout/ModalConfirmation'\nimport {\n    MdDelete,\n    MdCheckBoxOutlineBlank,\n    MdCreate,\n    MdCheckBox,\n    MdAddCircleOutline,\n    MdDone, MdWarning,\n    MdAdd,\n    IoIosAddCircleOutline,\n} from 'react-icons/md'\nimport { CARD_NEW, CARD_REMOVED, CARD_REMOVING, CARD_REQUIRED, DELETE_FORM, CHANGE_SECTION } from '../actions/types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: '',\n            desc: '',\n            edit: null,\n            delete: null,\n            loading: false,\n            disabled: false,\n            modal: false,\n            success: false,\n            init: false,\n            section: null,\n            editName: \"\",\n            sectionId: null,\n            sectionName: '',\n            forms: []\n        }\n\n        this.addCard = this.addCard.bind(this)\n        this.addSection = this.addSection.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.removeForm = this.removeForm.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            this.setState({ init: true })\n            this.props.fetchForm(this.props.match.params.id)\n                .then(res => {\n                    this.setState({\n                        title: res.title,\n                        desc: res.description,\n                        init: false\n                    })\n                })\n        }\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    editSection(id, name, e) {\n        this.setState({\n            sectionName: id,\n            editName: name\n        })\n    }\n\n    onKeypress(id, sectionId, e) {\n        if (e.key == 'Enter') {\n            this.setState({\n                sectionName: '',\n                editName: '',\n                section: {\n                    id: sectionId,\n                    name: this.state.editName\n                }\n            })\n\n            store.dispatch({\n                type: CHANGE_SECTION,\n                id: id,\n                payload: {\n                    name: this.state.editName,\n                    id: sectionId\n                }\n            })\n        }\n    }\n\n    async saveForm(e) {\n        const form = this.props.forms\n\n        if (this.state.title == '' || this.state.desc == '') {\n            return\n        }\n\n        if (_.isEmpty(form.create)) {\n            return\n        }\n\n        this.setState({\n            disabled: true,\n            loading: true,\n            edit: null\n        })\n\n        const entries = _.keyBy(form.create, 'sectionId')\n\n        let sections = []\n        Object.entries(entries).map((wiz, idx) => {\n            sections.push({\n                name: wiz[1].section.name,\n                id: wiz[1].section.id\n            })\n        })\n\n        const json = {\n            fields: form.create,\n            sections: sections\n        }\n\n        const data = {\n            title: this.state.title,\n            description: this.state.desc,\n            data: json,\n        }\n\n        this.props.saveForm(data, this.props.match.params.id)\n            .then(res => {\n                if (res) {\n                    //this.props.history.push(\"/\")\n                    setTimeout(() => {\n                        this.setState({\n                            success: false,\n                        })\n                    }, 3500)\n                }\n\n                this.setState({\n                    success: true,\n                    disabled: false,\n                    loading: false\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    addCard(e) {\n        e.preventDefault()\n        this.newCard()\n    }\n\n    async addSection(e) {\n        e.preventDefault()\n\n        await this.setState({\n            sectionId: null\n        })\n\n        await this.newCard()\n    }\n\n    async newField(sectionId, sectionName, e) {\n        e.preventDefault()\n\n        const id = uniqueId();\n        let list = this.props.forms.create;\n        let data = {\n            id: id,\n            title: '',\n            type: \"text\",\n            placeholder: '',\n            options: [],\n            required: false,\n        }\n\n        data.sectionId = sectionId\n        data.section = {\n            id: sectionId,\n            name: sectionName\n        }\n\n        store.dispatch({\n            type: CARD_NEW,\n            payload: data,\n            id: id\n        })\n\n        this.setState({\n            edit: id\n        })\n    }\n\n    newCard() {\n        const id = uniqueId();\n        let list = this.props.forms.create;\n        let section, data = {\n            id: id,\n            title: '',\n            type: \"text\",\n            placeholder: '',\n            options: [],\n            required: false,\n        }\n\n        if (_.isEmpty(list) || _.isEmpty(this.state.sectionId)) {\n            const sectionId = sectionID()\n            this.setState({\n                sectionId: sectionId,\n                section: {\n                    id: sectionId,\n                    name: \"New section\"\n                }\n            })\n\n            data.sectionId = sectionId\n            data.section = {\n                id: sectionId,\n                name: \"New section\"\n            }\n\n        } else {\n            data.sectionId = this.state.section.id\n            data.section = this.state.section\n        }\n\n        store.dispatch({\n            type: CARD_NEW,\n            payload: data,\n            id: id\n        })\n\n        this.setState({\n            edit: id\n        })\n    }\n\n    removeCard(id, e) {\n        let list = this.props.forms.create;\n\n        _.unset(list, id)\n        console.log(list)\n        /*\n        const deleting = new Promise((resolve, reject) => {\n            store.dispatch({\n                type: CARD_REMOVING,\n                payload: list,\n                id: id\n            })\n            resolve(true)\n        })*/\n\n        store.dispatch({\n            type: CARD_REMOVING,\n            payload: list,\n            id: id\n        })\n\n        this.setState({\n            edit: null,\n            sectionId: null,\n            section: null,\n            sectionName: ''\n        })\n\n        /*deleting.then(res => {\n            store.dispatch({\n                type: CARD_REMOVED,\n            })\n            this.setState({\n                edit: null,\n                sectionId: null,\n                section: null,\n                sectionName: ''\n            })\n        })*/\n    }\n\n    editCard(id, e) {\n        if (this.state.edit == id) {\n            this.setState({\n                edit: null\n            })\n        } else {\n            this.setState({\n                edit: id\n            })\n        }\n    }\n\n    toggleRequired(id, e) {\n        let list = this.props.forms.create;\n\n        const required = !list[id].required\n        store.dispatch({\n            type: CARD_REQUIRED,\n            payload: id,\n            required: required\n        })\n    }\n\n    modalOpen(e) {\n        this.setState({\n            modal: true\n        })\n    }\n\n    modalClose(e) {\n        this.setState({\n            modal: false\n        })\n    }\n\n    removeForm(e) {\n        this.props.deleteForm(this.props.match.params.id)\n            .then(res => {\n                this.props.modalButtonFinish()\n                document.body.classList.remove(\"modal-open\");\n                this.props.history.push(\"/\")\n            })\n            .catch(err => {\n                alert(\"Something went wrong!\")\n                this.setState({\n                    modal: false\n                })\n\n            })\n            .then(() => {\n                this.props.modalButtonFinish()\n            })\n    }\n\n    render() {\n        const forms = this.props.forms\n        const removingId = this.props.forms.deleting\n        let cards = []\n        let sections = _.keyBy(forms.create, 'sectionId')\n        console.log(forms.create)\n        Object.entries(sections).map((wiz, idx) => {\n            cards.push(\n                <div className=\"section\" key={wiz[1].sectionId}>\n                    <div className=\"section-top\">\n                        <div className=\"section-panel\" style={{ textAlign: \"left\" }}\n                            onBlur={this.onKeypress.bind(this, wiz[1].id, wiz[1].sectionId)}\n                            onKeyDown={this.onKeypress.bind(this, wiz[1].id, wiz[1].sectionId)}\n                            onClick={this.editSection.bind(this, wiz[0], wiz[1].section.name)}>\n                            {this.state.sectionName !== wiz[0] ? wiz[1].section.name : ''}\n                            {this.state.sectionName == wiz[0] && <Text className=\"input-lg\" type=\"text\"\n                                style={{ fontSize: \"20px\", height: \"34px\", marginBottom: \"0px\" }}\n                                disabled={this.state.loading}\n                                onChange={this.onChange}\n                                value={this.state.editName}\n                                name=\"editName\" id=\"_section\"\n                                placeholder=\"Enter section name\" />}\n                        </div>\n                        <button disabled={this.state.disabled || (this.state.init)} onClick={this.newField.bind(this, wiz[1].sectionId, wiz[1].section.name)} type=\"button\" className=\"btn btn-primary new-field\">\n                            <MdAdd size=\"1.5em\" />\n                        </button>\n                    </div>\n                    <div style={{ display: \"block\", clear: \"both\" }}></div>\n                    {Object.entries(_.filter(forms.create, { 'sectionId': wiz[1].sectionId }))\n                        .map((val, id) => (\n                            <div key={val[1].id} className={classnames('panel card')}>\n                                <div className={classnames(\"text-right footer-card\", {\n                                    \"bg-white\": this.state.edit !== val[1].id\n                                })}>\n                                    <div className=\"row\">\n                                        <div className=\"text-left col-7\">\n                                            <h4>{val[1].title != '' ? val[1].title : <em style={{ color: \"#999\" }}>No Question</em>}</h4>\n                                            <p>{val[1].type.toUpperCase().replace(\"_\", \" \")}</p>\n                                        </div>\n                                        <div className=\"col-5\">\n                                            <button onClick={this.toggleRequired.bind(this, val[1].id)} style={{ marginRight: \"10px\" }} type=\"button\" className={classnames({\n                                                'btn required': true,\n                                                'btn-default': !val[1].required,\n                                                'btn-dark': val[1].required\n                                            })}>\n                                                {!val[1].required && <React.Fragment><MdCheckBoxOutlineBlank size=\"1.5em\" style={{ float: \"left\" }} /> <span style={{ float: \"left\", lineHeight: \"25px\" }} className=\"\" >Required</span></React.Fragment>}\n\n                                                {val[1].required && <React.Fragment><MdCheckBox size=\"1.5em\" style={{ float: \"left\" }} /> <span style={{ float: \"left\", lineHeight: \"25px\" }} className=\"\"> Required</span></React.Fragment>}\n                                            </button>\n                                            <button onClick={this.removeCard.bind(this, val[1].id)} type=\"button\" className=\"btn btn-outline-danger delete_card\" style={{ marginRight: \"10px\" }}>\n                                                <MdDelete size=\"1.5em\" />\n                                            </button>\n                                            <button onClick={this.editCard.bind(this, val[1].id)} type=\"button\"\n                                                className={classnames({\n                                                    'btn delete-card': true,\n                                                    'btn-outline-secondary': this.state.edit !== val[1].id,\n                                                    'btn-success': this.state.edit == val[1].id\n                                                })}>\n                                                <MdCreate size=\"1.5em\" />\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                {this.state.edit == val[1].id && <div className=\"panel-body\"><Card id={val[1].id} data={val[1]} delete={removingId != false} /> </div>}\n                            </div>\n                        )\n                        )}\n                </div>\n            )\n        })\n\n        return (\n            <div className=\"row justify-content-md-center text-center mb-5\">\n                <div className=\"col-sm-8\">\n                    {this.props.match.params.id && <h2 className=\"mt-4\">Edit: {this.state.title}</h2>}\n                    {!this.props.match.params.id && <h2 className=\"mt-4\">Create A Form</h2>}\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            {this.state.success && <div class=\"alert alert-success text-left fade show\" role=\"alert\">\n                                <strong>Well done! all fields is successfully saved!</strong>\n                            </div>}\n\n                            <div className=\"form-group\">\n                                <Text className=\"input-lg\" type=\"text\" style={{ fontSize: \"20px\" }}\n                                    onChange={this.onChange}\n                                    disabled={this.state.loading}\n                                    value={this.state.title}\n                                    name=\"title\" id=\"_new_title\"\n                                    placeholder=\"Enter form title\" />\n\n                                <Textarea className=\"form-control input-lg\" style={{ fontSize: \"15px\", height: \"auto\" }}\n                                    onChange={this.onChange}\n                                    value={this.state.desc}\n                                    disabled={this.state.loading}\n                                    name=\"desc\"\n                                    id=\"_new_desc\"\n                                    placeholder=\"Enter form description\" />\n\n                                <div className=\"row\">\n                                    <div className=\"col-4 text-left\">\n                                        <Link to=\"/\" className=\"btn btn-outline-secondary\">&larr; Back to List</Link>\n                                    </div>\n\n                                    <div className=\"col-8\">\n                                        <div className=\"text-right\">\n                                            <button type=\"button\" disabled={this.state.disabled || (this.state.init && _.isEmpty(forms.create))} style={{ display: \"inline-flex\", flexDirection: \"row\" }} className=\"btn btn-success\" onClick={this.saveForm}>\n                                                <MdDone size=\"1.5em\" /> {this.state.loading == true ? 'Loading...' : 'Save All'}\n                                            </button>\n\n                                            <div className=\"btn-group\">\n                                                <button disabled={this.state.disabled || (this.state.init && _.isEmpty(forms.create))} style={{ marginLeft: \"10px\", display: \"inline-flex\", flexDirection: \"row\" }} type=\"button\" className=\"btn btn-primary\"\n                                                    onClick={this.addSection}>\n                                                    <MdAdd size=\"1.5em\" /> New Section\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    {!_.isEmpty(forms.create) && _.findKey(forms.create, 'sectionId') && cards.map((cr) => cr)}\n\n                    {!_.isEmpty(forms.create) && _.findKey(forms.create, 'sectionId') === undefined &&\n                        <div className=\"card-body text-center\">\n                            <MdWarning color=\"red\" size=\"3em\" /> <br />\n                            <h4>You must update this form by removing the form and starts it again</h4>\n                        </div>\n                    }\n\n                    {this.state.init && _.isEmpty(forms.create) && <div className=\"panel\">\n                        <div className=\"card-body\">\n                            Fetching fields...\n                        </div>\n                    </div>}\n\n                    {this.props.match.params.id && !_.isEmpty(forms.create) && <div className=\"text-center\">\n                        <button type=\"button\" disabled={this.state.disabled} onClick={this.modalOpen.bind(this)} className=\"btn mt-4 btn-outline-dark btn-lg\">\n                            <MdDelete size=\"1.5em\" />  Delete Permanently\n                        </button>\n                    </div>}\n\n                    {this.state.modal && <Modal okButton=\"OK, Delete!\" onClick={this.removeForm} onClose={this.modalClose.bind(this)} stateId=\"_remove_form\" title=\"Delete Form\">\n                        <h4>Are you sure to want to delete permanently ? </h4>\n                    </Modal>}\n                </div>\n            </div >\n\n        )\n    }\n}\n\nCreateForm.propTypes = {\n    forms: PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n    forms: state.forms\n})\n\nexport default connect(mapStateToProps, {\n    fetchForm,\n    saveForm,\n    deleteForm,\n    modalClose,\n    modalOpen,\n    modalButtonFinish\n})(CreateForm)\n\n","import rest, { restForm } from '../utils/rest'\nimport {\n    FETCH_FORMS,\n    FETCH_FORM,\n    CLEAR_FORM,\n    DELETE_FORM,\n    SAVE_FORM,\n    UPDATE_FORM\n} from '../actions/types'\nimport db from '../db'\nimport { uniqueId } from '../utils/helpers';\n\nexport const fetchForms = (args) => dispatch => {\n\n    return new Promise((resolve, reject) => {\n        db.table(\"forms\")\n            .toArray()\n            .then((forms) => {\n                dispatch({\n                    type: FETCH_FORMS,\n                    payload: forms\n                })\n\n                resolve(forms)\n            })\n            .catch(err => {\n                reject(err)\n            })\n        /*\n        const data = new FormData()\n        data.append(\"offset\", 0)\n        data.append(\"limit\", 20)\n\n        restForm()\n            .get(\"admin/form/all\", data)\n            .then(res => {\n\n                dispatch({\n                    type: FETCH_FORMS,\n                    payload: res.data.rows\n                })\n\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })*/\n    })\n}\n\n\nexport const fetchForm = (id) => dispatch => {\n\n    return new Promise(async (resolve, reject) => {\n        /*restForm()\n            .get(\"admin/form/detail/\" + id)\n            .then(res => {\n                const data = res.data.row.data\n                const parsed = JSON.parse(data)\n\n                dispatch({\n                    type: FETCH_FORM,\n                    payload: parsed.fields\n                })\n\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })*/\n\n        const field = await db.table(\"forms\")\n            .where({ id: parseInt(id) })\n            .first();\n\n        if (!field) {\n            reject(field)\n        }\n\n        dispatch({\n            type: FETCH_FORM,\n            payload: field.data.fields\n        })\n\n        resolve(field)\n    })\n}\n\nexport const saveForm = (data, id = null) => dispatch => {\n    if (id) {\n        data.id = parseInt(id)\n    }\n\n    return new Promise((resolve, reject) => {\n\n        if (id) {\n            db.table(\"forms\")\n                .update(parseInt(id), data)\n                .then(() => {\n                    dispatch({\n                        type: UPDATE_FORM\n                    })\n\n                    resolve(true)\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        } else {\n            data.code = uniqueId()\n\n            db.table(\"forms\")\n                .add(data)\n                .then((id) => {\n                    dispatch({\n                        type: SAVE_FORM\n                    })\n\n                    resolve(true)\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        }\n\n    })\n\n    /*restForm()\n        .post(\"admin/form/save\", formData)\n        .then(res => {\n            if (res.data.success) {\n                //this.props.history.push(\"/\")\n                setTimeout(() => {\n                    this.setState({\n                        success: false,\n                    })\n                }, 3500)\n            }\n\n            this.setState({\n                success: true,\n                disabled: false,\n                loading: false\n            })\n        })\n        .catch(err => {\n            console.log(err)\n        })*/\n}\n\nexport const deleteForm = (id) => dispatch => {\n\n    return new Promise((resolve, reject) => {\n        db.table(\"forms\")\n            .where({ id: parseInt(id) })\n            .delete()\n            .then((deleteCount) => {\n                dispatch({\n                    type: DELETE_FORM\n                })\n\n                resolve(true)\n            })\n            .catch(err => {\n                reject(err)\n            })\n\n        /*rest()\n            .get(\"admin/form/delete/\" + id)\n            .then(res => {\n                dispatch({\n                    type: DELETE_FORM,\n                })\n\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })*/\n    })\n}\n\nexport const clearForm = () => dispatch => {\n    dispatch({\n        type: CLEAR_FORM,\n    })\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { fetchForms, clearForm } from '../actions/form'\nimport rest, { restForm } from '../utils/rest'\nimport store from '../store'\nimport _ from 'lodash'\nimport Card from '../components/layout/Card'\nimport { uniqueId } from '../utils/helpers'\nimport { Text, Textarea } from '../components/fields'\nimport { MdDelete, MdCheckBoxOutlineBlank, MdCreate, MdCheckBox, MdAddCircle, MdDone } from 'react-icons/md'\nimport { CARD_NEW, CARD_REMOVED, CARD_REMOVING, CARD_REQUIRED } from '../actions/types';\n\n\nclass ListForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: '',\n            desc: '',\n            edit: null,\n            delete: null,\n            disabled: false,\n            loading: false,\n            base: '',\n            forms: []\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            loading: true\n        })\n        this.props.fetchForms()\n            .then(res => {\n                this.setState({\n                    loading: false,\n                    base: res.base_url\n                })\n            })\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    gotoEdit(id, e) {\n        e.preventDefault()\n        this.props.history.push(\"/edit/\" + id)\n    }\n\n    render() {\n        const forms = this.props.forms\n        return (\n            <div className=\"row justify-content-md-center text-center\">\n                <div className=\"col-sm-8\">\n                    <h2 className=\"mt-4\">Form Builder</h2>\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"form-group\" style={{ marginBottom: \"0px\" }}>\n\n                                <div className=\"text-left\">\n                                    <button type=\"button\" style={{ display: \"inline-flex\", flexDirection: \"row\" }} className=\"btn btn-success\" onClick={() => {\n                                        this.props.clearForm()\n                                        this.props.history.push(\"/new\")\n                                    }}>\n                                        <MdAddCircle size=\"1.5em\" /> Add New Form\n                                    </button>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"table-responsive\">\n                                <table className=\"table table-hover text-left\">\n                                    <thead>\n                                        <tr>\n                                            <th>Title</th>\n                                            <th>Code</th>\n                                            <th>Description</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    {!_.isEmpty(forms.list) &&\n                                        <tbody>\n                                            {forms.list.map((row, ind) => (\n                                                <tr key={ind}>\n                                                    <td>\n                                                        <strong> {row.title}</strong>\n                                                    </td>\n                                                    <td>\n                                                        <code>{row.code}</code>\n                                                    </td>\n                                                    <td>\n                                                        {row.description.substr(0, 25)}{row.description.length > 25 ? '...' : ''}\n                                                    </td>\n                                                    <td>\n                                                        <a className=\"btn btn-outline-primary\" onClick={this.gotoEdit.bind(this, row.id)}>\n                                                            <MdCreate size=\"1.5em\" />\n                                                        </a>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                        </tbody>}\n\n                                    {_.isEmpty(forms.list) && <tbody>\n                                        <tr>\n                                            <td colSpan=\"4\">\n                                                {this.state.loading ? 'Fetching data...' : 'No data'}\n                                            </td>\n                                        </tr>\n                                    </tbody>}\n                                </table>\n                            </div>\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n\n        )\n    }\n}\n\nListForm.propTypes = {\n    forms: PropTypes.object,\n    fetchForms: PropTypes.func\n}\n\nconst mapStateToProps = state => ({\n    forms: state.forms\n})\n\nexport default connect(mapStateToProps, { fetchForms, clearForm })(ListForm)\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\n// Route Page\nimport CreateForm from './pages/CreateForm'\nimport ListForm from './pages/ListForm'\n\nimport './sass/main.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <HashRouter basename=\"/form/\">\n          <div className=\"App\">\n            <Route exact path=\"/\" component={ListForm} />\n            <Route exact path=\"/new/\" component={CreateForm} />\n            <Route exact path=\"/edit/:id\" component={CreateForm} />\n          </div>\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}